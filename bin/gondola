#!/usr/bin/env ruby

# Gondola - gondola
# Main executable file which will dish out projects in parallel
# after converting them as needed

require 'rubygems'
require 'yaml'
require 'cmdparse'

lib_dir = File.expand_path(File.join(File.dirname(__FILE__), '..', 'lib/'))
$LOAD_PATH.unshift(lib_dir) unless $LOAD_PATH.include?(lib_dir)

require 'gondola'

# Command parsing stuff
cmd = CmdParse::CommandParser.new(true, true)
cmd.program_name = "gondola"
cmd.program_version = Gondola::VERSION
cmd.add_command(CmdParse::HelpCommand.new)
cmd.add_command(CmdParse::VersionCommand.new)

# Run command
class RunCommand < CmdParse::Command
  def initialize
    super('run', false)
    @opts = {}
    @quiet = false
    self.short_desc = "Run a test case or suite"
    # User supplied options for running a suite
    self.options = CmdParse::OptionParserWrapper.new do |opt|
      opt.on('-r', '--recursive', 'Execute all sub suites') do |r|
        @opts[:recursive] = true
      end
      opt.on('-q', '--quiet', 'Execute quietly') do |q|
        @quiet = true
      end
    end
  end

  # Proper usage format
  def usage
    puts "Usage: #{commandparser.program_name} run [options] [tests]"
  end

  # Function that is executed when a user issues a run command
  def execute(args)
    if args.length < 1
      usage
      exit 1
    end
    # Can either provide directory or file
    Gondola.new do |runner|
      unless @quiet
        runner.on_change do |result|
          Gondola::Results::Console.change result
        end
        runner.on_completion do |results|
          Gondola::Results::Console.completion results
        end
      end
      runner.on_error do |error|
        Gondola::Results::Console.error error
      end

      runner.add_tests *args
      puts "Contacting Sauce Labs, please wait..." unless @quiet
      runner.run @opts
    end
  end
end
cmd.add_command(RunCommand.new)

# New Project command
class ProjectCommand < CmdParse::Command
  def initialize
    super('project', false)
    self.short_desc = "Creates a new project folder"
  end

  def usage
    puts "Usage: #{commandparser.program_name} new project [name]"
  end

  def execute(args)
    if args.length < 1
      usage
      exit 1
    end

    args.each { |p| Dir.mkdir p }
  end
end

# New command
class NewCommand < CmdParse::Command
  def initialize
    super('new', true)
    self.short_desc = "Creates a new entity"
    self.add_command(ProjectCommand.new)
  end
end
cmd.add_command(NewCommand.new)

cmd.parse
